// Code generated by xlsx2go.go; DO NOT EDIT.

package dao

import (
	"database/sql"
	"fmt"
	xerrors "golang.org/x/xerrors"
	"strconv"
	types "techbookfest16-sample/domain/types"
)

type daoTrngorpmigrations struct {
	dm        *DaoTrnManager
	trn       *sql.Tx
	WbForInit Wbgorpmigrations
}

func (d *daoTrngorpmigrations) init() (err error) {
	d.dm.dtgorpmigrations, err = d.SelectW(d.WbForInit)
	if err != nil {
		return xerrors.Errorf(": %w", err)
	}
	return
}
func (d *daoTrngorpmigrations) Reset() {
	list := make([]*Dtogorpmigrations, 0, len(d.dm.dtgorpmigrations))
	for _, dr := range d.dm.dtgorpmigrations {
		if dr.rowState == Deleted {
			dr.rowState = Detached
			continue
		} else {
			dr.rowState = UnChanged
			list = append(list, dr)
		}
	}
	d.dm.dtgorpmigrations = list
}
func (d daoTrngorpmigrations) Dt() ([]*Dtogorpmigrations, error) {
	if len(d.dm.dtgorpmigrations) == 0 {
		err := d.init()
		if err != nil {
			err = xerrors.Errorf(": %w", err)
			return nil, err
		}
	}
	return d.dm.dtgorpmigrations, nil
}
func (d daoTrngorpmigrations) SelectAll() ([]*Dtogorpmigrations, error) {
	sql := fmt.Sprintf(sqlSelectgorpmigrations, "")
	rows, err := d.trn.Query(sql)
	defer rows.Close()
	if err != nil {
		return nil, xerrors.Errorf("sql=%s: %w", sql, err)
	}
	var dt []*Dtogorpmigrations
	for rows.Next() {
		var dr Dtogorpmigrations
		err = rows.Scan(&dr.Fldid, &dr.Fldapplied_at)
		if err != nil {
			return nil, xerrors.Errorf(": %w", err)
		}
		dr.rowState = Detached
		dr.Ub = NewUbgorpmigrations()
		dt = append(dt, &dr)
	}
	return dt, rows.Err()
}
func (d daoTrngorpmigrations) SelectW(wb Wbgorpmigrations) ([]*Dtogorpmigrations, error) {
	where := wb.build()
	prms, exists := where.Params()
	if exists {
		sql := fmt.Sprintf(sqlSelectgorpmigrations, where.String())
		rows, err := d.trn.Query(sql, prms...)
		defer rows.Close()
		if err != nil {
			return nil, xerrors.Errorf("sql=%s, args=%v: %w", sql, prms, err)
		}
		var dt []*Dtogorpmigrations
		for rows.Next() {
			var dr Dtogorpmigrations
			err = rows.Scan(&dr.Fldid, &dr.Fldapplied_at)
			if err != nil {
				return nil, xerrors.Errorf(": %w", err)
			}
			dr.rowState = Detached
			dr.Ub = NewUbgorpmigrations()
			dt = append(dt, &dr)
		}
		return dt, rows.Err()
	} else {
		return d.SelectAll()
	}
}
func (d daoTrngorpmigrations) Count() (cnt int64, err error) {
	return d.CountW(NewWbgorpmigrations())
}
func (d daoTrngorpmigrations) CountW(wb Wbgorpmigrations) (cnt int64, err error) {
	where := wb.build()
	prms, exists := where.Params()
	if exists {
		err = d.trn.QueryRow(fmt.Sprintf(sqlSelectgorpmigrationsForAggregation, "count(\"id\")", where.String()), prms...).Scan(&cnt)
		if err != nil {
			err = xerrors.Errorf(": %w", err)
			return
		}
		return
	} else {
		err = d.trn.QueryRow(fmt.Sprintf(sqlSelectgorpmigrationsForAggregation, "count(\"id\")", "")).Scan(&cnt)
		if err != nil {
			err = xerrors.Errorf(": %w", err)
			return
		}
		return
	}
}

// Min はgorp_migrationsのfld最小値を返します。
func (d daoTrngorpmigrations) Min(fld fldgorpmigrations) (min int64, err error) {
	return d.MinW(fld, NewWbgorpmigrations())
}
func (d daoTrngorpmigrations) MinW(fld fldgorpmigrations, wb Wbgorpmigrations) (min int64, err error) {
	where := wb.build()
	prms, exists := where.Params()
	var x sql.NullInt64
	if exists {
		err = d.trn.QueryRow(fmt.Sprintf(sqlSelectgorpmigrationsForAggregation, fmt.Sprintf("min(%s)", strconv.Quote(string(fld))), where.String()), prms...).Scan(&x)
	} else {
		err = d.trn.QueryRow(fmt.Sprintf(sqlSelectgorpmigrationsForAggregation, fmt.Sprintf("min(%s)", strconv.Quote(string(fld))), where.String())).Scan(&x)
	}
	if err != nil {
		err = xerrors.Errorf(": %w", err)
		return
	}
	if !x.Valid {
		err = xerrors.Errorf(": %w", types.ErrNotFound)
		return
	}
	min = x.Int64
	return
}

// Max はgorp_migrationsのfld最大値を返します。
func (d daoTrngorpmigrations) Max(fld fldgorpmigrations) (max int64, err error) {
	return d.MaxW(fld, NewWbgorpmigrations())
}
func (d daoTrngorpmigrations) MaxW(fld fldgorpmigrations, wb Wbgorpmigrations) (max int64, err error) {
	where := wb.build()
	prms, exists := where.Params()
	var x sql.NullInt64
	if exists {
		err = d.trn.QueryRow(fmt.Sprintf(sqlSelectgorpmigrationsForAggregation, fmt.Sprintf("max(%s)", strconv.Quote(string(fld))), where.String()), prms...).Scan(&x)
	} else {
		err = d.trn.QueryRow(fmt.Sprintf(sqlSelectgorpmigrationsForAggregation, fmt.Sprintf("max(%s)", strconv.Quote(string(fld))), where.String())).Scan(&x)
	}
	if err != nil {
		err = xerrors.Errorf(": %w", err)
		return
	}
	if !x.Valid {
		err = xerrors.Errorf(": %w", types.ErrNotFound)
		return
	}
	max = x.Int64
	return
}
