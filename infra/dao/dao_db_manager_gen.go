// Code generated by xlsx2go.go; DO NOT EDIT.

package dao

import (
	"database/sql"
	types "techbookfest16-sample/domain/types"
)

// DaoDbManager is a struct.
// This struct does not include sync.Mutex lock system.
// The sync.Mutex is YAGNI(You ain't gonna need it). This struct will change, when this struct is simultaneously accessed from some instances; the one of usage example is the singleton pattaern called from anywhere in backend system
type DaoDbManager struct {
	db                       *sql.DB
	dtEnumログ区分               []*DtoEnumログ区分
	dtEnum受払区分               []*DtoEnum受払区分
	dtgorpmigrations         []*Dtogorpmigrations
	dtリソース変更履歴               []*Dtoリソース変更履歴
	mapIDvsDrリソース変更履歴        map[Id]*Dtoリソース変更履歴
	dtリソース変更履歴アップロード時        []*Dtoリソース変更履歴アップロード時
	mapIDvsDrリソース変更履歴アップロード時 map[Id]*Dtoリソース変更履歴アップロード時
	dtログ                     []*Dtoログ
	mapIDvsDrログ              map[Id]*Dtoログ
	dtログアップロード時              []*Dtoログアップロード時
	mapIDvsDrログアップロード時       map[Id]*Dtoログアップロード時
	dtログ画面操作時                []*Dtoログ画面操作時
	mapIDvsDrログ画面操作時         map[Id]*Dtoログ画面操作時
	dt単位                     []*Dto単位
	mapIDvsDr単位              map[Id]*Dto単位
	mapコードvsDr単位             map[types.Code単位]*Dto単位
	dt受払                     []*Dto受払
	mapIDvsDr受払              map[Id]*Dto受払
	dt受払仕入                   []*Dto受払仕入
	mapIDvsDr受払仕入            map[Id]*Dto受払仕入
	dt受払出荷                   []*Dto受払出荷
	mapIDvsDr受払出荷            map[Id]*Dto受払出荷
	dt受払投入実績                 []*Dto受払投入実績
	mapIDvsDr受払投入実績          map[Id]*Dto受払投入実績
	dt受払製造実績                 []*Dto受払製造実績
	mapIDvsDr受払製造実績          map[Id]*Dto受払製造実績
	dt品目                     []*Dto品目
	mapIDvsDr品目              map[Id]*Dto品目
	mapコードvsDr品目             map[types.Code品目]*Dto品目
	dt品目仕入品                  []*Dto品目仕入品
	mapIDvsDr品目仕入品           map[Id]*Dto品目仕入品
	dt品目製造品                  []*Dto品目製造品
	mapIDvsDr品目製造品           map[Id]*Dto品目製造品
	dt生産用品目区分                []*Dto生産用品目区分
	mapIDvsDr生産用品目区分         map[Id]*Dto生産用品目区分
	mapコードvsDr生産用品目区分        map[types.Code生産用品目区分]*Dto生産用品目区分
}

func NewDaoDbManager(db *sql.DB) *DaoDbManager {
	return &DaoDbManager{
		db:                db,
		mapIDvsDrリソース変更履歴: make(map[Id]*Dtoリソース変更履歴),
		mapIDvsDrリソース変更履歴アップロード時: make(map[Id]*Dtoリソース変更履歴アップロード時),
		mapIDvsDrログ:        make(map[Id]*Dtoログ),
		mapIDvsDrログアップロード時: make(map[Id]*Dtoログアップロード時),
		mapIDvsDrログ画面操作時:   make(map[Id]*Dtoログ画面操作時),
		mapIDvsDr単位:        make(map[Id]*Dto単位),
		mapIDvsDr受払:        make(map[Id]*Dto受払),
		mapIDvsDr受払仕入:      make(map[Id]*Dto受払仕入),
		mapIDvsDr受払出荷:      make(map[Id]*Dto受払出荷),
		mapIDvsDr受払投入実績:    make(map[Id]*Dto受払投入実績),
		mapIDvsDr受払製造実績:    make(map[Id]*Dto受払製造実績),
		mapIDvsDr品目:        make(map[Id]*Dto品目),
		mapIDvsDr品目仕入品:     make(map[Id]*Dto品目仕入品),
		mapIDvsDr品目製造品:     make(map[Id]*Dto品目製造品),
		mapIDvsDr生産用品目区分:   make(map[Id]*Dto生産用品目区分),
		mapコードvsDr単位:       make(map[types.Code単位]*Dto単位),
		mapコードvsDr品目:       make(map[types.Code品目]*Dto品目),
		mapコードvsDr生産用品目区分:  make(map[types.Code生産用品目区分]*Dto生産用品目区分),
	}
}
func (dm *DaoDbManager) NewDaoDbEnumログ区分() daoDbEnumログ区分 {
	return daoDbEnumログ区分{
		WbForInit: NewWbEnumログ区分(),
		db:        dm.db,
		dm:        dm,
	}
}
func (dm *DaoDbManager) NewDaoDbEnum受払区分() daoDbEnum受払区分 {
	return daoDbEnum受払区分{
		WbForInit: NewWbEnum受払区分(),
		db:        dm.db,
		dm:        dm,
	}
}
func (dm *DaoDbManager) NewDaoDbgorpmigrations() daoDbgorpmigrations {
	return daoDbgorpmigrations{
		WbForInit: NewWbgorpmigrations(),
		db:        dm.db,
		dm:        dm,
	}
}
func (dm *DaoDbManager) NewDaoDbリソース変更履歴() daoDbリソース変更履歴 {
	return daoDbリソース変更履歴{
		WbForInit: NewWbリソース変更履歴(),
		db:        dm.db,
		dm:        dm,
	}
}
func (dm *DaoDbManager) NewDaoDbリソース変更履歴アップロード時() daoDbリソース変更履歴アップロード時 {
	return daoDbリソース変更履歴アップロード時{
		WbForInit: NewWbリソース変更履歴アップロード時(),
		db:        dm.db,
		dm:        dm,
	}
}
func (dm *DaoDbManager) NewDaoDbログ() daoDbログ {
	return daoDbログ{
		WbForInit: NewWbログ(),
		db:        dm.db,
		dm:        dm,
	}
}
func (dm *DaoDbManager) NewDaoDbログアップロード時() daoDbログアップロード時 {
	return daoDbログアップロード時{
		WbForInit: NewWbログアップロード時(),
		db:        dm.db,
		dm:        dm,
	}
}
func (dm *DaoDbManager) NewDaoDbログ画面操作時() daoDbログ画面操作時 {
	return daoDbログ画面操作時{
		WbForInit: NewWbログ画面操作時(),
		db:        dm.db,
		dm:        dm,
	}
}
func (dm *DaoDbManager) NewDaoDb単位() daoDb単位 {
	return daoDb単位{
		WbForInit: NewWb単位(),
		db:        dm.db,
		dm:        dm,
	}
}
func (dm *DaoDbManager) NewDaoDb受払() daoDb受払 {
	return daoDb受払{
		WbForInit: NewWb受払(),
		db:        dm.db,
		dm:        dm,
	}
}
func (dm *DaoDbManager) NewDaoDb受払仕入() daoDb受払仕入 {
	return daoDb受払仕入{
		WbForInit: NewWb受払仕入(),
		db:        dm.db,
		dm:        dm,
	}
}
func (dm *DaoDbManager) NewDaoDb受払出荷() daoDb受払出荷 {
	return daoDb受払出荷{
		WbForInit: NewWb受払出荷(),
		db:        dm.db,
		dm:        dm,
	}
}
func (dm *DaoDbManager) NewDaoDb受払投入実績() daoDb受払投入実績 {
	return daoDb受払投入実績{
		WbForInit: NewWb受払投入実績(),
		db:        dm.db,
		dm:        dm,
	}
}
func (dm *DaoDbManager) NewDaoDb受払製造実績() daoDb受払製造実績 {
	return daoDb受払製造実績{
		WbForInit: NewWb受払製造実績(),
		db:        dm.db,
		dm:        dm,
	}
}
func (dm *DaoDbManager) NewDaoDb品目() daoDb品目 {
	return daoDb品目{
		WbForInit: NewWb品目(),
		db:        dm.db,
		dm:        dm,
	}
}
func (dm *DaoDbManager) NewDaoDb品目仕入品() daoDb品目仕入品 {
	return daoDb品目仕入品{
		WbForInit: NewWb品目仕入品(),
		db:        dm.db,
		dm:        dm,
	}
}
func (dm *DaoDbManager) NewDaoDb品目製造品() daoDb品目製造品 {
	return daoDb品目製造品{
		WbForInit: NewWb品目製造品(),
		db:        dm.db,
		dm:        dm,
	}
}
func (dm *DaoDbManager) NewDaoDb生産用品目区分() daoDb生産用品目区分 {
	return daoDb生産用品目区分{
		WbForInit: NewWb生産用品目区分(),
		db:        dm.db,
		dm:        dm,
	}
}
