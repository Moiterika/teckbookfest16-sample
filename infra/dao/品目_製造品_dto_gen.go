// Code generated by xlsx2go.go; DO NOT EDIT.

package dao

import "encoding/json"

type Dto品目製造品 struct {
	FldID         Id   `json:"ID"`
	FldMRP計算対象フラグ bool `json:"MRP計算対象フラグ"`

	rowState DataRowState
	Ub       *ub品目製造品 `json:"-"`
}

func (d Dto品目製造品) TableName() string {
	return "品目_製造品"
}
func (d Dto品目製造品) RowState() DataRowState {
	return d.rowState
}

// Import はDto品目製造品型に主キー以外を上書きする。
func (d *Dto品目製造品) Import(MRP計算対象フラグ bool) {
	// 項目がすべて一致していたら、何もしない
	if d.FldMRP計算対象フラグ == MRP計算対象フラグ {
		return
	}
	if d.FldMRP計算対象フラグ != MRP計算対象フラグ {
		d.FldMRP計算対象フラグ = MRP計算対象フラグ
		d.Ub.Set(Tbl品目製造品().FldMRP計算対象フラグ(), MRP計算対象フラグ)
	}

}

// jsonKey品目製造品 はロギング用jsonのキー。主キー項目
type jsonKey品目製造品 struct {
	FldID Id `json:"ID"`
}

// jsonKey はロギング用jsonのキーを生成するメソッド。
func (d *Dto品目製造品) jsonKey() jsonKey品目製造品 {
	return jsonKey品目製造品{FldID: d.FldID}
}

type json品目製造品 struct {
	RowState string       `json:"row_state"`
	K        jsonKey品目製造品 `json:"k"`
	V        *Dto品目製造品    `json:"v,omitempty"`
}

// ToJson はMarshalJSONと同じ機能を提供するメソッド。しかし、無限ループを防ぐため、別名メソッドにしてある。
func (d *Dto品目製造品) ToJson() ([]byte, error) {
	switch d.rowState {
	case Modified:
		j := make(map[string]interface{})
		j["row_state"] = d.rowState.String()
		j["k"] = map[string]interface{}{"ID": d.FldID}
		j["v"] = d.Ub.copyMap()
		return json.Marshal(j)
	case Deleted:
		return json.Marshal(json品目製造品{
			K:        d.jsonKey(),
			RowState: d.rowState.String(),
			V:        nil,
		})
	default:
		return json.Marshal(json品目製造品{
			K:        d.jsonKey(),
			RowState: d.rowState.String(),
			V:        d,
		})
	}
}
