// Code generated by xlsx2go.go; DO NOT EDIT.

package dao

import (
	"fmt"
	pq "github.com/lib/pq"
	objects "techbookfest16-sample/domain/objects"
)

type WbEnum受払区分 interface {
	And(field fldEnum受払区分, op whereBuilderOperater, val interface{}) WbEnum受払区分
	Clear()
	build(argCntStart ...int) (where Where)
}
type wbEnum受払区分 struct {
	config []whereBuilderExp
}

func NewWbEnum受払区分() WbEnum受払区分 {
	return &wbEnum受払区分{config: make([]whereBuilderExp, 0)}
}
func newWbEnum受払区分WithPrimaryKeys(受払区分 objects.Enum受払区分) WbEnum受払区分 {
	wb := &wbEnum受払区分{config: make([]whereBuilderExp, 0)}
	wb.And(TblEnum受払区分().Fld受払区分(), OpEqu, 受払区分)

	return wb
}
func (wb *wbEnum受払区分) And(field fldEnum受払区分, op whereBuilderOperater, val interface{}) WbEnum受払区分 {
	wb.config = append(wb.config, whereBuilderExp{
		field: string(field),
		op:    op,
		val:   val,
	})
	return wb
}
func (wb *wbEnum受払区分) Clear() {
	wb.config = make([]whereBuilderExp, 0)
}
func (wb *wbEnum受払区分) build(argCntStart ...int) (where Where) {
	where.w = ""
	where.prms = make([]interface{}, 0, len(wb.config))
	argCnt := 1
	if len(argCntStart) == 1 {
		argCnt = argCntStart[0]
	}
	for _, e := range wb.config {
		switch e.op {
		case OpIn:
			where.w += fmt.Sprintf(" AND (\"%s\"%s)", e.field, fmt.Sprintf(e.op.string(), fmt.Sprintf("$%d", argCnt)))
			argCnt++
			where.prms = append(where.prms, pq.Array(e.val))
			continue
		case OpIsNull:
			fallthrough
		case OpIsNotNull:
			where.w += fmt.Sprintf(" AND (\"%s\"%s)", e.field, e.op.string())
			continue
		default:
			where.w += fmt.Sprintf(" AND (\"%s\"%s)", e.field, fmt.Sprintf(e.op.string(), fmt.Sprintf("$%d", argCnt)))
			argCnt++
			where.prms = append(where.prms, e.val)
			continue
		}
	}
	return
}

type nothingWbEnum受払区分 struct{}

func (wb *nothingWbEnum受払区分) And(field fldEnum受払区分, op whereBuilderOperater, val interface{}) WbEnum受払区分 {
	return wb
}
func (wb *nothingWbEnum受払区分) Clear() {}
func (wb *nothingWbEnum受払区分) build(argCntStart ...int) (where Where) {
	return Where{w: " AND 1<>1"}
}
func NewNothingWbEnum受払区分() WbEnum受払区分 {
	return &nothingWbEnum受払区分{}
}
