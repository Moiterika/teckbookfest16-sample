// Code generated by xlsx2go.go; DO NOT EDIT.

package dao

import (
	"fmt"
	pq "github.com/lib/pq"
)

type Wbリソース変更履歴アップロード時 interface {
	And(field fldリソース変更履歴アップロード時, op whereBuilderOperater, val interface{}) Wbリソース変更履歴アップロード時
	Clear()
	Exists(Ebリソース変更履歴アップロード時) Wbリソース変更履歴アップロード時
	build(argCntStart ...int) (where Where)
}
type wbリソース変更履歴アップロード時 struct {
	config []whereBuilderExp
	ebs    []Ebリソース変更履歴アップロード時
}

func NewWbリソース変更履歴アップロード時() Wbリソース変更履歴アップロード時 {
	return &wbリソース変更履歴アップロード時{
		config: make([]whereBuilderExp, 0),
		ebs:    make([]Ebリソース変更履歴アップロード時, 0),
	}
}
func newWbリソース変更履歴アップロード時WithPrimaryKeys(No Id) Wbリソース変更履歴アップロード時 {
	wb := &wbリソース変更履歴アップロード時{config: make([]whereBuilderExp, 0)}
	wb.And(Tblリソース変更履歴アップロード時().FldNo(), OpEqu, No)

	return wb
}
func (wb *wbリソース変更履歴アップロード時) And(field fldリソース変更履歴アップロード時, op whereBuilderOperater, val interface{}) Wbリソース変更履歴アップロード時 {
	wb.config = append(wb.config, whereBuilderExp{
		field: string(field),
		op:    op,
		val:   val,
	})
	return wb
}
func (wb *wbリソース変更履歴アップロード時) Clear() {
	wb.config = make([]whereBuilderExp, 0)
}
func (wb *wbリソース変更履歴アップロード時) Exists(eb Ebリソース変更履歴アップロード時) Wbリソース変更履歴アップロード時 {
	wb.ebs = append(wb.ebs, eb)
	return wb
}
func (wb *wbリソース変更履歴アップロード時) build(argsCntStart ...int) (where Where) {
	where.w = ""
	where.prms = make([]interface{}, 0, len(wb.config))
	if len(argsCntStart) == 1 {
		where.argsCnt = argsCntStart[0]
	}
	for _, e := range wb.config {
		switch e.op {
		case OpIn:
			where.argsCnt++
			where.w += fmt.Sprintf(" AND (\"%s\"%s)", e.field, fmt.Sprintf(e.op.string(), fmt.Sprintf("$%d", where.argsCnt)))
			where.prms = append(where.prms, pq.Array(e.val))
			continue
		case OpIsNull:
			fallthrough
		case OpIsNotNull:
			where.w += fmt.Sprintf(" AND (\"%s\"%s)", e.field, e.op.string())
			continue
		default:
			where.argsCnt++
			where.w += fmt.Sprintf(" AND (\"%s\"%s)", e.field, fmt.Sprintf(e.op.string(), fmt.Sprintf("$%d", where.argsCnt)))
			where.prms = append(where.prms, e.val)
			continue
		}
	}
	for _, eb := range wb.ebs {
		w := eb.buildEbリソース変更履歴アップロード時(where.argsCnt)
		where.Append(w)
	}
	return
}

type nothingWbリソース変更履歴アップロード時 struct{}

func (wb *nothingWbリソース変更履歴アップロード時) And(field fldリソース変更履歴アップロード時, op whereBuilderOperater, val interface{}) Wbリソース変更履歴アップロード時 {
	return wb
}
func (wb *nothingWbリソース変更履歴アップロード時) Clear() {}
func (wb *nothingWbリソース変更履歴アップロード時) Exists(_ Ebリソース変更履歴アップロード時) Wbリソース変更履歴アップロード時 {
	return wb
}
func (wb *nothingWbリソース変更履歴アップロード時) build(argCntStart ...int) (where Where) {
	return Where{w: " AND 1<>1"}
}
func NewNothingWbリソース変更履歴アップロード時() Wbリソース変更履歴アップロード時 {
	return &nothingWbリソース変更履歴アップロード時{}
}
