// Code generated by xlsx2go.go; DO NOT EDIT.

package dao

import (
	"database/sql"
	"fmt"
	xerrors "golang.org/x/xerrors"
	"strconv"
	types "techbookfest16-sample/domain/types"
)

type daoTrnEnumログ区分 struct {
	dm        *DaoTrnManager
	trn       *sql.Tx
	WbForInit WbEnumログ区分
}

func (d *daoTrnEnumログ区分) init() (err error) {
	d.dm.dtEnumログ区分, err = d.SelectW(d.WbForInit)
	if err != nil {
		return xerrors.Errorf(": %w", err)
	}
	return
}
func (d *daoTrnEnumログ区分) Reset() {
	list := make([]*DtoEnumログ区分, 0, len(d.dm.dtEnumログ区分))
	for _, dr := range d.dm.dtEnumログ区分 {
		if dr.rowState == Deleted {
			dr.rowState = Detached
			continue
		} else {
			dr.rowState = UnChanged
			list = append(list, dr)
		}
	}
	d.dm.dtEnumログ区分 = list
}
func (d daoTrnEnumログ区分) Dt() ([]*DtoEnumログ区分, error) {
	if len(d.dm.dtEnumログ区分) == 0 {
		err := d.init()
		if err != nil {
			err = xerrors.Errorf(": %w", err)
			return nil, err
		}
	}
	return d.dm.dtEnumログ区分, nil
}
func (d daoTrnEnumログ区分) SelectAll() ([]*DtoEnumログ区分, error) {
	sql := fmt.Sprintf(sqlSelectEnumログ区分, "")
	rows, err := d.trn.Query(sql)
	defer rows.Close()
	if err != nil {
		return nil, xerrors.Errorf("sql=%s: %w", sql, err)
	}
	var dt []*DtoEnumログ区分
	for rows.Next() {
		var dr DtoEnumログ区分
		err = rows.Scan(&dr.Fld区分, &dr.Fld名称)
		if err != nil {
			return nil, xerrors.Errorf(": %w", err)
		}
		dr.rowState = Detached
		dr.Ub = NewUbEnumログ区分()
		dt = append(dt, &dr)
	}
	return dt, rows.Err()
}
func (d daoTrnEnumログ区分) SelectW(wb WbEnumログ区分) ([]*DtoEnumログ区分, error) {
	where := wb.build()
	prms, exists := where.Params()
	if exists {
		sql := fmt.Sprintf(sqlSelectEnumログ区分, where.String())
		rows, err := d.trn.Query(sql, prms...)
		defer rows.Close()
		if err != nil {
			return nil, xerrors.Errorf("sql=%s, args=%v: %w", sql, prms, err)
		}
		var dt []*DtoEnumログ区分
		for rows.Next() {
			var dr DtoEnumログ区分
			err = rows.Scan(&dr.Fld区分, &dr.Fld名称)
			if err != nil {
				return nil, xerrors.Errorf(": %w", err)
			}
			dr.rowState = Detached
			dr.Ub = NewUbEnumログ区分()
			dt = append(dt, &dr)
		}
		return dt, rows.Err()
	} else {
		return d.SelectAll()
	}
}
func (d daoTrnEnumログ区分) Count() (cnt int64, err error) {
	return d.CountW(NewWbEnumログ区分())
}
func (d daoTrnEnumログ区分) CountW(wb WbEnumログ区分) (cnt int64, err error) {
	where := wb.build()
	prms, exists := where.Params()
	if exists {
		err = d.trn.QueryRow(fmt.Sprintf(sqlSelectEnumログ区分ForAggregation, "count(\"区分\")", where.String()), prms...).Scan(&cnt)
		if err != nil {
			err = xerrors.Errorf(": %w", err)
			return
		}
		return
	} else {
		err = d.trn.QueryRow(fmt.Sprintf(sqlSelectEnumログ区分ForAggregation, "count(\"区分\")", "")).Scan(&cnt)
		if err != nil {
			err = xerrors.Errorf(": %w", err)
			return
		}
		return
	}
}

// Min はEnumログ区分のfld最小値を返します。
func (d daoTrnEnumログ区分) Min(fld fldEnumログ区分) (min int64, err error) {
	return d.MinW(fld, NewWbEnumログ区分())
}
func (d daoTrnEnumログ区分) MinW(fld fldEnumログ区分, wb WbEnumログ区分) (min int64, err error) {
	where := wb.build()
	prms, exists := where.Params()
	var x sql.NullInt64
	if exists {
		err = d.trn.QueryRow(fmt.Sprintf(sqlSelectEnumログ区分ForAggregation, fmt.Sprintf("min(%s)", strconv.Quote(string(fld))), where.String()), prms...).Scan(&x)
	} else {
		err = d.trn.QueryRow(fmt.Sprintf(sqlSelectEnumログ区分ForAggregation, fmt.Sprintf("min(%s)", strconv.Quote(string(fld))), where.String())).Scan(&x)
	}
	if err != nil {
		err = xerrors.Errorf(": %w", err)
		return
	}
	if !x.Valid {
		err = xerrors.Errorf(": %w", types.ErrNotFound)
		return
	}
	min = x.Int64
	return
}

// Max はEnumログ区分のfld最大値を返します。
func (d daoTrnEnumログ区分) Max(fld fldEnumログ区分) (max int64, err error) {
	return d.MaxW(fld, NewWbEnumログ区分())
}
func (d daoTrnEnumログ区分) MaxW(fld fldEnumログ区分, wb WbEnumログ区分) (max int64, err error) {
	where := wb.build()
	prms, exists := where.Params()
	var x sql.NullInt64
	if exists {
		err = d.trn.QueryRow(fmt.Sprintf(sqlSelectEnumログ区分ForAggregation, fmt.Sprintf("max(%s)", strconv.Quote(string(fld))), where.String()), prms...).Scan(&x)
	} else {
		err = d.trn.QueryRow(fmt.Sprintf(sqlSelectEnumログ区分ForAggregation, fmt.Sprintf("max(%s)", strconv.Quote(string(fld))), where.String())).Scan(&x)
	}
	if err != nil {
		err = xerrors.Errorf(": %w", err)
		return
	}
	if !x.Valid {
		err = xerrors.Errorf(": %w", types.ErrNotFound)
		return
	}
	max = x.Int64
	return
}
